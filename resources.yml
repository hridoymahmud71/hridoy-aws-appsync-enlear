booksTable:
  Type: AWS::DynamoDB::Table
  Properties: 
    AttributeDefinitions: 
      -   AttributeName: "bookId"
          AttributeType: "S"

    BillingMode: PAY_PER_REQUEST
    KeySchema: 
      - AttributeName: "bookId"
        KeyType: "HASH"
    Tags: 
      - Key: Name
        Value: books-table

#order table
orderTable:
  Type: AWS::DynamoDB::Table
  Properties: 
    AttributeDefinitions: 
      -   AttributeName: "userId"
          AttributeType: "S"
      -   AttributeName: "orderId"
          AttributeType: "S"
      -   AttributeName: "bookId"
          AttributeType: "S"
      -   AttributeName: "createdAt"
          AttributeType: "S"

    BillingMode: PAY_PER_REQUEST
    KeySchema: 
      - AttributeName: "userId"
        KeyType: "HASH"
      - AttributeName: "orderId"
        KeyType: "RANGE"
    GlobalSecondaryIndexes:
      - IndexName: "byOrder"
        KeySchema: 
          - AttributeName: "bookId"
            KeyType: "HASH"
          - AttributeName: "orderId"
            KeyType: "RANGE"
        Projection: 
          ProjectionType: ALL
      - IndexName: "byCreationDate"
        KeySchema: 
          - AttributeName: "bookId"
            KeyType: "HASH"
          - AttributeName: "createdAt"
            KeyType: "RANGE"
        Projection: 
          ProjectionType: ALL
    Tags: 
      - Key: Name
        Value: order-table

#Cognito user pool
cognitoUserPool:
  Type: AWS::Cognito::UserPool
  Properties:   
    UsernameAttributes: 
      - email
    UserPoolName: "HridoyBookstoreUserPool"

#cognito user pool client
cognitoUserPoolClient:
  Type: AWS::Cognito::UserPoolClient
  Properties: 
    ClientName: Web    
    UserPoolId: !Ref cognitoUserPool


#congnito user pool group  Admin Group
cognitoAdminGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties: 
    Description: "Admin Users"
    GroupName: Admin
    Precedence: 0
    RoleArn: !GetAtt cognitoAdminRole.Arn
    UserPoolId: !Ref cognitoUserPool

# cognito admin iam role
cognitoAdminRole:
  Type: AWS::IAM::Role
  Properties:
    AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
        - Effect: Allow
          Principal:
            Federated:
              - cognito-identity.amazonaws.com
          Action:
            - sts:AssumeRoleWithWebIdentity
    Description: I AM role used by admins
    Policies:
      - PolicyName: hridoy-bookstore-admin-group-policy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:*
              Resource:
                - !GetAtt booksTable.Arn
                - !GetAtt orderTable.Arn
    RoleName: hridoy-bookstore-admin-role


#congnito user pool group  Customer Group
cognitoCustomerGroup:
  Type: AWS::Cognito::UserPoolGroup
  Properties: 
    Description: "Customer Users"
    GroupName: Customer
    Precedence: 1
    RoleArn: !GetAtt cognitoCustomerRole.Arn
    UserPoolId: !Ref cognitoUserPool

# cognito customer iam role
cognitoCustomerRole:
  Type: AWS::IAM::Role
  Properties: 
    AssumeRolePolicyDocument: 
      Version: "2012-10-17"
      Statement:
      - Effect: Allow
        Principal:
          Federated:
            - "cognito-identity.amazonaws.com"
        Action:
          - "sts:AssumeRoleWithWebIdentity"
    Description: "I AM role used by customers"  
    Policies: 
      - PolicyName: "hridoy-bookstore-customer-group-policy"
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow          
            Action:
                - "dynamodb:*"
            Resource:
              - !GetAtt orderTable.Arn
          - Effect: Allow          
            Action:
                - "dynamodb:GetItem"
                - "dynamodb:Query"
                - "dynamodb:BatchGetItem"
            Resource:
              - !GetAtt booksTable.Arn
    RoleName: "hridoy-bookstore-customer-role"

